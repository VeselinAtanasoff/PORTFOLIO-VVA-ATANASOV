using System;
using System.Collections.Generic;
using System.Net.Sockets;
using System.Net;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Runtime.Intrinsics.X86;

namespace ContainerShippingVeselin
{
    internal class Server
    {
        private const string IP = "127.0.0.1";
        private const int PORT = 11000;
        private Socket serverSocket;

        private ContainerManager containerManager;

        private States state = States.WAITING;
        private string type = "";
        private double volume = 0.0;
        private double weight = 0;
        private bool fridge = false;

        /// <summary>
        /// Constructor for creating a server instance.
        /// Initializes the server socket, binds it to the specified IP address and port,
        /// and starts listening for client connections.
        /// </summary>
        public Server()
        {
            containerManager = new ContainerManager();
            
            IPAddress ip = IPAddress.Parse(IP);
            IPEndPoint localEndPoint = new IPEndPoint(ip, PORT);

            this.serverSocket = new Socket(ip.AddressFamily, SocketType.Stream, ProtocolType.Tcp);
            this.serverSocket.Bind(localEndPoint);
            this.serverSocket.Listen(10);

        }

        /// <summary>
        /// Accepts client connections, processes requests, and sends responses.
        /// </summary>
        /// <returns>A report generated by the container manager.</returns>
        public string GetRequestAndSendResponse()
        {
            string report = "\n";
            Socket clientSocket = this.serverSocket.Accept();
            Console.WriteLine("Client connected");
            NetworkStream networkStream = new NetworkStream(clientSocket);
            StreamReader reader = new StreamReader(networkStream);
            StreamWriter writer = new StreamWriter(networkStream);

            writer.WriteLine("WELCOME");
            writer.Flush();
            Console.WriteLine("reading line now");
            bool working = true;
            while (working)
            {
                string request = reader.ReadLine();
                request = request.Trim();
                Console.WriteLine(request);
                if(request!=null || request !="")
                {
                    string response = CommunicationManager(request.Trim());
                    writer.WriteLine(response);
                    writer.Flush();
                    Console.WriteLine(response);
                    if (response == "ACK")
                    {
                        working = false;
                        report = containerManager.GenerateReport();
                    }
                    else if (response.StartsWith("ERR"))
                    {
                        working = false;
                        report = containerManager.GenerateReport();
                    }
                    
                }
                

                
            }
            return report;
            
            
        }

        /// <summary>
        /// Manages communication with the client based on the current state.
        /// </summary>
        /// <param name="request">The request received from the client.</param>
        /// <returns>The response to be sent back to the client.</returns>
        private string CommunicationManager(string request)
        {
            string response = "";
            switch (state)
            {
                case States.WAITING:
                    try
                    {
                        if (request == "START")
                        {
                            response = "TYPE";
                            state = States.GET_TYPE;
                        }
                        else if (request == "STOP")
                        {
                            response = "ACK";
                        }
                        else
                        {
                            throw new InvalidCommandException("Invalid command");
                        }
                    }
                    catch (InvalidCommandException e)
                    {
                        response = e.Message;
                    }
                    break;
                case States.GET_TYPE:
                    try
                    {
                        if (request == "HALF")
                        {
                            response = "VOLUME";
                            type = request;
                            state = States.GET_VOLUME;
                        }
                        else if (request == "FULL")
                        {
                            response = "WEIGHT";
                            type = request;
                            state = States.GET_WEIGHT;
                        }
                        else if (request == "QUART")
                        {
                            containerManager.CreateContainer(request, 0, 0, false);
                            response = "ACK";

                            state = States.WAITING;
                        }
                        else
                        {
                            throw new InvalidCommandException("Invalid command");
                        }

                    }
                    catch (InvalidCommandException e)
                    {
                        response = e.Message;
                    }
                    break;
                case States.GET_VOLUME:
                    try
                    {
                        volume = Convert.ToDouble(request);
                        if (volume > 30 || volume < 0)
                        {
                            throw new InvalidVolumeException("Invalid volume");
                        }
                        response = "ACK";
                        containerManager.CreateContainer(type, Convert.ToInt32(volume), 0, false);
                        state = States.WAITING;

                    }
                    catch (InvalidVolumeException e)
                    {
                        response = e.Message;
                    }
                    catch (FormatException e)
                    {
                        response = "Invalid volume";
                    }
                    break;
                case States.GET_WEIGHT:
                    try
                    {
                        weight = Convert.ToDouble(request);
                        if (weight > 20000 || weight < 0)
                        {
                            throw new InvalidWeightException("Invalid weight");
                        }
                        response = "FRIDGE";
                        state = States.GET_FRIDGE;
                    }
                    catch (InvalidWeightException e)
                    {
                        response = e.Message;
                    }
                    catch (FormatException e)
                    {
                        response = "ERR;Weight cannot contain symbols different than 0-9";
                    }
                    break;
                case States.GET_FRIDGE:
                    try
                    {
                        if (request == "YES")
                        {
                            fridge = true;
                        }
                        else if (request == "NO")
                        {
                            fridge = false;
                        }
                        else
                        {
                            throw new InvalidCommandException("Invalid command");
                        }
                        response = "ACK";
                        containerManager.CreateContainer(type, 0, Convert.ToInt32(weight), fridge);
                        state = States.WAITING;

                    }
                    catch (InvalidCommandException e)
                    {
                        response = e.Message;
                    }
                    catch (InvalidWeightException e)
                    {
                        response = e.Message;
                    }
                    break;
            }
            return response;

        }
    }
}
